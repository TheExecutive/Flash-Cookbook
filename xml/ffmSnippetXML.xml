<?xml version="1.0" encoding="utf-8"?>
	<snippets>
		<snippet id="creatingVariables" course="ffm">
				<name>Creating Variables</name>
				<difficulty>Very Easy</difficulty>
				<keywords text="variables,text, field,textfield,ffm" />
				<code>
					<![CDATA[var tf:TextField = new TextField]]>
				</code>
				<notes>
• var - Declares you are creating a new variable, and must be done before variable can be used.
• tf - Is the variable name, it can not begin with a number and can not contain spaces. You can use camelCase or underscores in place of spaces.
• TextField - Is the data type, it represents what kind of object the variable and what types of data can be stored in it - be specific with data types.
				</notes>
				<resources>
					<link href="http://wddbs.com/FFM/slides/Day%201/FFM_Day1_VariablesAndValues.pdf" title="FFM Portal" />
				</resources>
				
		</snippet>
		<snippet id = "creatingFunctions_basic" course="ffm">
				<name>Creating a basic Function</name>
				<difficulty>Very Easy</difficulty>
				<keywords text="function,create,creating,ffm" />
				<code>
					<![CDATA[function functionName():ReturnType
{
	//action to be performed
}]]>
				</code>
				<notes>
• function - Declares you are creating a new function
• functionName() - Acts as a unique identifier for the function. 
• () - The parenthatsis hold optional parameters, parameters are arguments you can pass with a function.
• ReturnType - If your function returns a value, this is where you define that type of value will be returned. If no value is returned use "void" for the ReturnType.
				</notes>
				<resources>
					<link href="http://wddbs.com/FFM/slides/Day%201/FFM_Day1_Functions.pdf" title="FFM Portal" />
				</resources>
		</snippet>
		<snippet id = "creatingFunctions_advanced" course="ffm">
				<name>Creating an Advanced Function</name>
				<difficulty>Very Easy</difficulty>
				<keywords text="function,create,advanced,creating,ffm" />
				<code>
					<![CDATA[private function stringLength(pString:String):Number
{
	return pString.length;
}]]>
				</code>
				<notes>
• private - Accessor type, defines where a function is private or public.
• function - Declares you are creating a new function
• stringLength() - Acts as a unique identifier for the function. Must not start with a number but can contain numbers, letters, and underscores.
• (pString:String) - The parameter that is being passed into the function. This is looking for a variable named pString that is data typed as a String.
• Number - Is the ReturnType, this function will return a number
• return pString.length - This will return the number of characters that compose the variable pString. So if pString was equal to the word "Cat" the length of pString would be "3".
				</notes>
				<resources>
					<link href="http://wddbs.com/FFM/slides/Day%201/FFM_Day1_Functions.pdf" title="FFM Portal" />
				</resources>
		</snippet>
		<snippet id = "callingFunctions" course="ffm">
				<name>Calling a Function</name>
				<difficulty>Very Easy</difficulty>
				<keywords text="function,call,calling,ffm" />
				<code>
					<![CDATA[MovieClip.play()]]>
				</code>
				<notes>
• MovieClip - The object that will call the function
• play() - The function being called.
Executing this code would allow a movie clip to call the play() function, which would then play the movie clip. 
				</notes>
				<code>
					<![CDATA[this.myFunction(var1, var2)]]>
				</code>
				<notes>
• this - Refers to the parent container, usually the stage, but can also be used to refer to assets created in the Flash IDE
• myFunction - The name of the function being called, remember this is a unique identifier and can be named anything you would like, but it can not start with a number
• (var1, var2) - The parameters being passed to the function. 
				</notes>
				<resources>
					<link href="http://wddbs.com/FFM/slides/Day%201/FFM_Day1_Functions.pdf" title="FFM Portal" />
				</resources>
		</snippet>
		<snippet id = "castingDataTypes" course="ffm">
				<name>Casting a Data Type</name>
				<difficulty>Very Easy</difficulty>
				<keywords text="convert,converting,data,type,data type, dataType,ffm" />
				<code>
					<![CDATA[var a:Number;]]>
				</code>
				<code>
					<![CDATA[int(a); OR a as int;]]>
				</code>
				<notes>
• a:Number - Is a variable data typed as a Number.
• int(a) - Converts a to an int instead of a Number.
• a as int - Also converts a to an int instead of a Number.
				</notes>
				<resources>
					<link href="http://wddbs.com/FFM/slides/Day%201/FFM_DataTypes.key.pdf" title="FFM Portal" />
				</resources>
		</snippet>	
		<snippet id = "changeObjectsXPosition" course="ffm">
				<name>Change an objects X position</name>
				<difficulty>Very Easy</difficulty>
				<keywords text="object,x,x position, position,ffm" />
				<code>
					<![CDATA[obj.x = n;]]>
				</code>
				<notes>
• obj - The object you want to move.
• x - Declares you want to change the objects x property, or the horizontal position of the object.
• n - Represents the number for the new x position based on the objects container.
				</notes>
				<resources>
					<link href="http://wddbs.com/FFM/slides/Day%202/FFM_Display%20Objects.pdf" title="FFM Portal" />
				</resources>
		</snippet>
		<snippet id = "changeObjectsYPosition" course="ffm">
				<name>Change an objects Y position</name>
				<difficulty>Very Easy</difficulty>
				<keywords text="object,y,y position, position,ffm" />
				<code>
					<![CDATA[obj.y = n;]]>
				</code>
				<notes>
• obj - The object you want to move.
• y - Declares you want to change the objects y property, or the vertical position of the object.
• n - Represents the number for the new y position based on the objects container.
				</notes>
				<resources>
					<link href="http://wddbs.com/FFM/slides/Day%202/FFM_Display%20Objects.pdf" title="FFM Portal" />
				</resources>
		</snippet>
		<snippet id = "changeObjectsWidth" course="ffm">
				<name>Change an objects width</name>
				<difficulty>Very Easy</difficulty>
				<keywords text="object,width,ffm" />
				<code>
					<![CDATA[obj.width = n;]]>
				</code>
				<notes>
• obj - The object you want to move.
• width - Declares you want to change the objects width property.
• n - Represents the number for the objects new width.
				</notes>
				<resources>
					<link href="http://wddbs.com/FFM/slides/Day%202/FFM_Display%20Objects.pdf" title="FFM Portal" />
				</resources>
		</snippet>
		<snippet id = "changeObjectsHeight" course="ffm">
				<name>Change an objects height</name>
				<difficulty>Very Easy</difficulty>
				<keywords text="object,height,ffm" />
				<code>
					<![CDATA[obj.height = n;]]>
				</code>
				<notes>
• obj - The object you want to move.
• height - Declares you want to change the objects height property.
• n - Represents the number for the objects new height.
				</notes>
				<resources>
					<link href="http://wddbs.com/FFM/slides/Day%202/FFM_Display%20Objects.pdf" title="FFM Portal" />
				</resources>
		</snippet>
		<snippet id = "changeObjectsScaleX" course="ffm">
				<name>Change an objects scaleX</name>
				<difficulty>Very Easy</difficulty>
				<keywords text="object,scale,scaleX,ffm" />
				<code>
					<![CDATA[obj.scaleX = .n;]]>
				</code>
				<notes>
• obj - The object you want to move.
• scaleX - Declares you want to change the objects scaleX property, or the ratio between the objects current size and its normal size.
• .n - Represents the number for the objects new scaleX, is a number between .1 and 1.
				</notes>
				<resources>
					<link href="http://wddbs.com/FFM/slides/Day%202/FFM_Display%20Objects.pdf" title="FFM Portal" />
				</resources>
		</snippet>
		<snippet id = "changeObjectsScaleY" course="ffm">
				<name>Change an objects scaleY</name>
				<difficulty>Very Easy</difficulty>
				<keywords text="object,scale,scaleY,ffm" />
				<code>
					<![CDATA[obj.scaleY = .n;]]>
				</code>
				<notes>
• obj - The object you want to move.
• scaleX - Declares you want to change the objects scaleY property, or the ratio between the objects current size and its normal size.
• .n - Represents the number for the objects new scaleX, is a number between .1 and 1.
				</notes>
				<resources>
					<link href="http://wddbs.com/FFM/slides/Day%202/FFM_Display%20Objects.pdf" title="FFM Portal" />
				</resources>
		</snippet>
		<snippet id = "setButtonMode" course="ffm">
				<name>Set objects button mode</name>
				<difficulty>Very Easy</difficulty>
				<keywords text="object,button,mode,buttonMode,ffm" />
				<code>
					<![CDATA[obj.buttonMode = true;]]>
				</code>
				<notes>
• obj - The object you want to move.
• buttonMode - Is a boolean value, by default set to false, setting the value true will cause the object to behave like a button.
• true - Sets the value to true, is set to false by default.
				</notes>
				<resources>
					<link href="http://wddbs.com/FFM/slides/Day%202/FFM_Display%20Objects.pdf" title="FFM Portal" />
				</resources>
		</snippet>
		<snippet id = "setSWFproperties" course="ffm">
				<name>Set SWF properties</name>
				<difficulty>Very Easy</difficulty>
				<keywords text="swf,properties,swf properties,ffm" />
				<code>
					<![CDATA[ [SWF(width = "x" height = "x" frameRate = "xx" backgroundColor = "0xFFFFFF")] ]]>
				</code>
				<notes>
• SWF - Declares you are changing the properties of the SWF file.
• width - Sets the width of the SWF display window.
• height - Sets the height of the SWF display window.
• frameRate - Sets the frame rate of the SWF, will typically be 30 for standard projects and 60 for projects containing animations. 60 fps provides a smoother animation than 30 fps.
• backgroundColor - Sets the display windows background color, uses Hex values, must start with 0x (zero x).
				</notes>
				<resources>
					<link href="http://wddbs.com/FFM/slides/Day%202/FFM_Display%20Objects.pdf" title="FFM Portal" />
				</resources>
		</snippet>
		<snippet id = "createSimpleTextField" course="ffm">
				<name>Create a simple TextField</name>
				<difficulty>Very Easy</difficulty>
				<keywords text="textfield,create,ffm" />
				<code>
					<![CDATA[var myTF:TextField = new TextField();
this.addChild(myTF);
myTF.text = "Hello World";]]>
				</code>
				<notes>
• var - Delcares a new variable is being created.
• myTF - Unique identifier for the text field you are creating.
• :TextField - Declares the data type for the variable, in this case it is a TextField.
• = new TextField - Declares that this variable is a new text field, by default text fields have a height and width of 100.
• this.addChild(myTF) - Adds the text field to the stage, or display window. Do not forget to add the child to the display list or your text field will not show up.
• myTF.text = "Hello World" - Sets the text of the newly created variable to a string equal to Hello World. Note: you must enclose the text string in quotes.
				</notes>
				<resources>
					<link href="http://wddbs.com/FFM/slides/Day%202/FFM_TextFields.pdf" title="FFM Portal" />
				</resources>
		</snippet>
		<snippet id = "textFieldMultiLine" course="ffm">
				<name>Set TextField to Multi-line</name>
				<difficulty>Very Easy</difficulty>
				<keywords text="textfield,multi,line,multiline,ffm" />
				<code>
					<![CDATA[myTF.multiline = true;]]>
				</code>
				<notes>
• myTF - Unique identifier for the text field you are creating.
• .multiline - Access multi-line property of text field.
• = true; - by setting equal to true allows the text field to have multiple lines.
				</notes>
				<resources>
					<link href="http://wddbs.com/FFM/slides/Day%202/FFM_TextFields.pdf" title="FFM Portal" />
				</resources>
		</snippet>
		<snippet id = "textFieldWordWrap" course="ffm">
				<name>Set TextField word wrap</name>
				<difficulty>Very Easy</difficulty>
				<keywords text="textfield,wrap,word wrap,ffm" />
				<code>
					<![CDATA[myTF.wordWrap = true;]]>
				</code>
				<notes>
• myTF - Unique identifier for the text field you are creating.
• .wordWrap - Access word wrap property of text field.
• = true; - by setting true allows the text field to wrap text into multiple lines. is set to false by default. Must set multi-line property to true for text to wrap to multiple lines.
				</notes>
				<resources>
					<link href="http://wddbs.com/FFM/slides/Day%202/FFM_TextFields.pdf" title="FFM Portal" />
				</resources>
		</snippet>
		<snippet id = "textFieldEnableTab" course="ffm">
				<name>Set TextField to enable tab</name>
				<difficulty>Very Easy</difficulty>
				<keywords text="textfield,tabEnabled,tab,enable,ffm" />
				<code>
					<![CDATA[myTF.tabEnabled = true;]]>
				</code>
				<notes>
• myTF - Unique identifier for the text field you are creating.
• .tabEnabled - Determines whether the text field can be selected by pressing the tab key.
• = true; - sets tabEnabled to true and allows text fields to be selected by pressing the tab key.
				</notes>
				<resources>
					<link href="http://wddbs.com/FFM/slides/Day%202/FFM_TextFields.pdf" title="FFM Portal" />
				</resources>
		</snippet>
		<snippet id = "textFieldEmbedFonts" course="ffm">
				<name>Embed fonts for text fields</name>
				<difficulty>Very Easy</difficulty>
				<keywords text="textfield,embed,font,fonts,embedFonts,ffm" />
				<code>
					<![CDATA[myTF.embedFonts = true;]]>
				</code>
				<notes>
• myTF - Unique identifier for the text field you are creating.
• .embedFonts - Embedding fonts allows Flash to use the desired font you would like text to be displayed in.
• = true; - Directs the TextField to use the font outlines embedded in the movies library, if correct font doesnt exist in library nothing is show. By default this is set to false and the TextField will pick a standard font to display the text in.
				</notes>
				<resources>
					<link href="http://wddbs.com/FFM/slides/Day%202/FFM_TextFields.pdf" title="FFM Portal" />
				</resources>
		</snippet>
		<snippet id = "setTextFormat" course="ffm">
				<name>Set a TextField's TextFormat</name>
				<difficulty>Very Easy</difficulty>
				<keywords text="textfield,format,text,textformat,ffm" />
				<code>
					<![CDATA[var myFormat:TextFormat = new TextFormat();]]>
				</code>
				<notes>
• var - Declares you are creating a new variable.
• myFormat - Unique identifier for variable.
• :TextFormat - Data types the new variable as TextFormat.
				</notes>
				<code>
					<![CDATA[myFormat.font = "Font Name";
myFormat.size = n;
myFormat.color = 0xFFFFFF;]]>
				</code>
				<notes>
• myFormat.font = Sets the font you would like to be displayed in the TextField, must be enclosed in quotes and spelled correctly including spaces and/or special characters.
• myFormat.size = Sets the font size for the text in the text field, must be a number;
• myFormat.color = Sets the color of the font in the text field, must be a HEX value and must start with 0x.
				</notes>
				<resources>
					<link href="http://wddbs.com/FFM/slides/Day%202/FFM_TextFields.pdf" title="FFM Portal" />
				</resources>
		</snippet>
		<snippet id = "assignTextFormatToTextField" course="ffm">
				<name>Applying TextFormat to a TextField</name>
				<difficulty>Very Easy</difficulty>
				<keywords text="textfield,format,text,textformat,ffm" />
				<code>
					<![CDATA[myTF.setTextFormat = myFormat;]]>
				</code>
				<code>
					<![CDATA[myTF.defaultTextFormat = myFormat;]]>
				</code>
				<notes>
• myTF.setTextFormat - Applies the text formatting to the text field AFTER the text has been placed in the text field.
• myTF.defaultTextFormat - Applies the text formatting to the text field BEFORE the text has been placed in the text field.
				</notes>
				<resources>
					<link href="http://wddbs.com/FFM/slides/Day%202/FFM_TextFormat.pdf" title="FFM Portal" />
				</resources>
		</snippet>
		<snippet id = "createInputTextField" course="ffm">
				<name>Creating an Input TextField</name>
				<difficulty>Very Easy</difficulty>
				<keywords text="textfield,input,text,ffm" />
				<code>
					<![CDATA[myTF.type = TextFieldType.INPUT;]]>
				</code>
				<notes>
• myTF - The text field variable name.
• .type - The property of the text field you want to alter.
• = TextFieldType.INPUT - Sets the text field to accept data inputted by the user. 
				</notes>
				<code>
					<![CDATA[myTF.maxChars;]]>
				</code>
				<code>
					<![CDATA[myTF.restrict = "a-z,A-Z,0-9";]]>
				</code>
				<notes>
• myTF - The text field variable name.
• .maxChars - Sets the maximum amount of characters the text field can hold, must be a number.
• .restrict - Sets restrictions on what types of characters can be put into the text field. The above example allows for all letters (upper and lower case) and numbers 0 through 9 to be inputted into the text field.
				</notes>
				<resources>
					<link href="http://wddbs.com/FFM/slides/Day%203/FFM_InputTextFields.pdf" title="FFM Portal" />
				</resources>
		</snippet>
		<snippet id = "eventBasics" course="ffm">
				<name>Events - Basic Structure</name>
				<difficulty>Easy</difficulty>
				<keywords text="event,listener,eventListener,ffm" />
				<code>
					<![CDATA[item.addEventListener(Event.EVENT_TYPE, Responder);]]>
				</code>
				<notes>
• item - the variable you want to attach the event listener to.
• .addEventListner - Adds the event listner to the object it is attached to, is a property of the object.
• (Event.EVENT_TYPE, - Declares what event to listen for, there are many to choose from so make sure you choose to right event for the right task.
Responder); - Is the function that will run once the event has occured, can be named anything but make sure function names are descriptive.

//See below example for more detail on writing event listeners.
				</notes>
				<code>
					<![CDATA[myMovieClip.addEventListener(MouseEvent.CLICK, doSomething);
function doSomething(event:MouseEvent):void
{
	//actions to be performed
}]]>
				</code>
				<notes>
• myMovieClip - Variable name for movie clip variable.
• .addEventListener - Adds an event listener to the variable. 
• (MouseEvent.CLICK - Tells the variable to listen for a mouse event, specifically when a user clicks the mouse button. Is basically a variable hold the string "click".
• ,doSomething) - Is the function that will run once the mouse button has been clicked.
• function doSomething - declares a new function with the name doSomething.
• (event:MouseEvent) - Parameters that let the function know to respond to a mouse event, specifically when the mouse is clicked.
• :void - Since the function does not return anything we end the function with the keyword "void".
• //actions to be performed - this is where you would write the actions to be performed once the mouse event is dispatched.
				</notes>
				<resources>
					<link href="http://wddbs.com/FFM/slides/Day%203/FFM_Events.pdff" title="FFM Portal" />
				</resources>
		</snippet>
		<snippet id = "removeEvent" course="ffm">
				<name>Removing an Event Listener</name>
				<difficulty>Easy</difficulty>
				<keywords text="event,remove,removeEvent,listner,ffm" />
				<code>
					<![CDATA[myItem.removeEventListner(MouseEvent.CLICK, doSomething;]]>
				</code>
				<notes>
• myItem - The variable you are removing the listener from
• .removeEventListner - Removes the event listener from the object it is attached to
• (MouseEvent.CLICK, doSomething) - Parameters for removeEventListener, in this case the event being removed is a mouse click event. You must also include the function the event listener is attached to. 

//You should always remove an event listener once it is not needed anymore, this will not only prevent memory leaks, but also keep the program running effeciently.
				</notes>
				<resources>
					<link href="http://wddbs.com/FFM/slides/Day%203/FFM_Events.pdf" title="FFM Portal" />
				</resources>
		</snippet>
		<snippet id = "basicConditional" course="ffm">
				<name>Basic Conditional Statement</name>
				<difficulty>Easy</difficulty>
				<keywords text="conditional,if,if else,ffm" />
				<code>
					<![CDATA[if(condition)
{
	doSomething():
}
else
{
	doSomethingElse();
}]]>
				</code>
				<notes>
• if() - Evaluates a condition, where condition equals the parameters of the condition you are evaluating.
• doSomething() - Would be the actions performed if the condition is true.
• else - provides a second condition in the event the condition returns false.
• doSomethingElse() - The second set of actions to be performed is the condition returns false.
				</notes>
				<resources>
					<link href="http://wddbs.com/FFM/slides/Day%203/FFM_Conditionals.pdf" title="FFM Portal" />
				</resources>
		</snippet>
		<snippet id = "multipleConditional" course="ffm">
				<name>Multiple Conditions Statement</name>
				<difficulty>Moderate</difficulty>
				<keywords text="conditional,if,if else,multiple,ffm" />
				<code>
					<![CDATA[if(condition)
{
	doSomething():
}
else if (a == b)
{
	doSomethingElse();
}
else
{
	doAnotherThing();
}]]>
				</code>
				<notes>
• if() - Evaluates a condition, where condition equals the parameters of the condition you are evaluating.
• doSomething() - Would be the actions performed if the condition is true.
• else if (a == b) - Provides another set of conditions to evaluate, in this case if a is equal to b then the doSomethingElse function would run.
• doSomethingElse() - The second set of actions to be performed is the condition returns false.
• else - Provides a third set of instruction in the event neither of the first two conditions returns true.
• doAnotherThing(); - Action to perform in the event neither of the first two conditions return true.
				</notes>
				<resources>
					<link href="http://wddbs.com/FFM/slides/Day%203/FFM_Conditionals.pdf" title="FFM Portal" />
				</resources>
		</snippet>
		<snippet id = "comparisonOperators" course="ffm">
				<name>Comparison Operators</name>
				<difficulty>Moderate</difficulty>
				<keywords text="conditional,comparison,operators,ffm" />
				<code>
					<![CDATA[(a == b)]]>
				</code>
				<notes>
• a/b - Variables to be compared, where a represents one variable and b represents the second
• == - Same as saying "if equal to". So the above statement would read "If a is equal to b" which evaluates to TRUE if the two values are the same.
				</notes>
				<code>
					<![CDATA[(a != b)]]>
				</code>
				<notes>
• a/b - Variables to be compared, where a represents one variable and b represents the second
• != - Same as saying "if not equal to". So the above statement would read "If a is not equal to b" which evaluates to TRUE if the two values are not the same.

				</notes>
				<code>
					<![CDATA[(a>b), (a<b), (a<=b), (a>=b);]]>
				</code>
				<notes>
• <![CDATA[ >]]> - Same as saying "if value a is greater than value b".
• <![CDATA[ <]]> - Same as saying "if value a is less than value b".
• <![CDATA[ <=]]> - Same as saying "if value a is less than or equal to value b".
• <![CDATA[ >=]]> - Same as saying "if value a is great than or equal to value b".

// Other optional condition evaluators
• <![CDATA[ &&]]> - "AND" - Same as saying "if condition 1 AND codition 2 are the same", if the same the condition would return true.
• <![CDATA[ ||]]> - "OR" - Same as saying "if condition 1 OR condition 2 are the same". If condition 1 returned true then condition 2 would not be evaluated, condition stops as soon as one returns a value of TRUE.
				</notes>
				<resources>
					<link href="http://wddbs.com/FFM/slides/Day%203/FFM_Conditionals.pdf" title="FFM Portal" />
				</resources>
		</snippet>
		<snippet id = "mathClass" course="ffm">
				<name>Math Class</name>
				<difficulty>Moderate</difficulty>
				<keywords text="math,class,math class,round,ceiling,ceil,floor,ffm" />
				<code>
					<![CDATA[Math.round(num)
Math.ceil(num)
Math.floor(num)
Math.random()]]>
				</code>
				<notes>
• Math. - Math class, contains methods and constants that represent common mathematical functions and values.
• num - Any number you want to perform the Math action on
• round(num) - Rounds the num up or down to the nearest integer and returns the value.
• ceil(num) - Rounds the parameter up to the next higher integer.
• floor(num) - Rounds the num down to an integer, is effectively the same as casting to an integer.
• random() - Returns a "psuedo-random" number between 0 and 1.
				</notes>
				<resources>
					<link href="http://wddbs.com/FFM/slides/Day%204/FFM_MathClass.key.pdf" title="FFM Portal" />
				</resources>
		</snippet>
		<snippet id = "mouseEvents" course="ffm">
				<name>Mouse Events</name>
				<difficulty>Moderate</difficulty>
				<keywords text="mouse,event,mouseevent,click,roll,over,off,enterframe,focus,in,out,ffm" />
				<code>
					<![CDATA[item.addEventListner(MouseEvent.CLICK, eventFunction);
item.addEventListener(MouseEvent.ROLL_OVER, eventFunction);
item.addEventListener(MouseEvent.ROLL_OUT, eventFunction);
item.addEventListener(MouseEvent.MOUSE_DOWN, eventFunction);
item.addEventListener(MouseEvent.MOUSE.UP, eventFunction);]]>
				</code>
				<notes>
• item.addEventListner - Adds an event listner to an object named item
• MouseEvent.CLICK - Listens for the user to click a mouse button.
• MouseEvent.ROLL_OVER - Listens for the mouse cursor to the roll over (on) the item.
• MouseEvent.ROLL_OUT - Listens for the mouse cursor to roll out (off) the item.
• MouseEvent.MOUSE_DOWN - Triggers while the mouse button is being pressed down, not the same as MouseEvent.CLICK. Use primarily for affordance effects.
• MouseEvent.MOUSE_UP - Triggers after them mouse button has been released, notthe same as MouseEvent.CLICK. Use primarily for affordance effects.
• eventFunction - The function that will run once the mouseEvent has taken place.
				</notes>
				<resources>
					<link href="http://wddbs.com/FFM/slides/Day%205/FFM_EventObjects.pdf" title="FFM Portal" />
				</resources>
		</snippet>
		<snippet id = "enterFrameEvent" course="ffm">
				<name>Enter Frame Event</name>
				<difficulty>Moderate</difficulty>
				<keywords text="event,enter,frame,enterframe,ffm" />
				<code>
					<![CDATA[item.addEventListner(Event.ENTER_FRAME);]]>
				</code>
				<notes>
• item.addEventListner - Adds an event listner to an object named item
• Event.ENTER_FRAME - This event is constantly running and updating when the program is launched. Best used for animations or for any object that is being updated frequently.
				</notes>
				<resources>
					<link href="http://help.adobe.com/en_US/FlashPlatform/reference/actionscript/3/flash/events/Event.html" title="Adobe Docs" />
				</resources>
		</snippet>
		<snippet id = "customEvents" course="ffm">
				<name>Custom Events</name>
				<difficulty>Moderate</difficulty>
				<keywords text="event,custom,custom event,customevent,ffm" />
				<code>
					<![CDATA[var e:Event = new Event("string");
this.dispatchEvent(e); 
removeEventListener(Event.ENTER_FRAME, function);]]>
				</code>
				<notes>
• var e:Event - Delcares a new variable named e and data types that variable as an Event.
• = new Event("string"); - Declares we are creating a new event, the event will hold a string that is equal to its action. So if this was a complete event, the string would be "complete".
• this.dispatchEvent(e); - Tells the object (this) to dispatch the event (e). this line is required in order for the event to take place.
• removeEventListner(Event.ENTER_FRAME, function) - Removes the event listner once it has finished running. This is good practice and prevents memory leaks.
				</notes>
				<resources>
					<link href="http://help.adobe.com/en_US/FlashPlatform/reference/actionscript/3/flash/events/Event.html" title="Adobe Docs" />
				</resources>
		</snippet>
		<snippet id = "gettersSetters" course="ffm">
				<name>Getters/Setters</name>
				<difficulty>Moderate</difficulty>
				<keywords text="getters,setters,getters and setters,getters/setters,ffm" />
				<code>
					<![CDATA[public function getLabel():String
{
	return myTextField.text;
}
public function setLabel(value:String):void
{
	myTextfield.text = value;
}]]>
				</code>
				<notes>
• public function - Declares a new function and makes it public, this allows other classes to be access the function also.
• getLabel():String - Where getLabel is the function name, this function returns a String value.
• return myTextfield.text - This action returns the text in the text field as a value, return is required for the value to be passed to the setter.

• setLabel(value:String):void - This public function is the setter, it accepts a value that is a String and returns nothing (void).
• myTextfield.text = value - This action takes the String value that is returned from the getter and sets the Textfield's text equal to that value.
				</notes>
				<resources>
					<link href="http://wddbs.com/FFM/slides/Day%206/FFM_GettersSetters.pdf" title="FFM Portal" />
				</resources>
		</snippet>
		<snippet id = "forLoop" course="ffm">
				<name>Creating a for loop</name>
				<difficulty>Moderate</difficulty>
				<keywords text="for,loop,for loop,ffm" />
				<code>
					<![CDATA[for(var i:int = 0, i<n; i++;)
{
	doSomething(i);
}]]>
				</code>
				<notes>
• for() - Begins the for loop, all parameters for the loop go inside the brackets.
• var i:int = 0; - Declares a new variable named i and sets that variable to an integer equal to zero. NOTE: "i" is commonly used for loop variables, however if using multiple loops you should change the variable to a different letter to prevent warnings. The variable can be any letter or combination thereof.
• i <![CDATA[<]]> n; - Where "i" represents the variable and "n" represents a number, this loop will run until "i" is greater than the number set by "n".
• i++; - This code incriments "i" by 1 everytime the loop runs until "i" is greater than "n".
doSomething(i); - A function the loop calls for each time it runs, by passing the variable "i" into the parameters the function can change every time the loop runs based on the value of "i".
				</notes>
				<resources>
					<link href="http://wddbs.com/FFM/slides/Day%207/FFM_Day7.1_Loops.key.pdf" title="FFM Portal" />
				</resources>
		</snippet>
		<snippet id = "whileLoop" course="ffm">
				<name>Creating a while loop</name>
				<difficulty>Moderate</difficulty>
				<keywords text="while,loop,while loop,ffm" />
				<code>
					<![CDATA[fwhile(a != b)
{
	doSomething();
}]]>
				</code>
				<notes>
• while - Begins the while loop, all parameters for the loop go inside the brackets.
• (a != b) - Sets the condtion equal to saying "while a does not equal b". Various conditions and variables can be passed in to meet or test for any condition. 
• doSomething(); -  A function the loop calls for each time it runs, stops running once the desired conditions is met. 
				</notes>
				<resources>
					<link href="http://wddbs.com/FFM/slides/Day%207/FFM_Day7.1_Loops.key.pdf" title="FFM Portal" />
				</resources>
		</snippet>
		<snippet id = "forEachLoop" course="ffm">
				<name>Creating a for each loop</name>
				<difficulty>Moderate</difficulty>
				<keywords text="for,each,for each,loop,for each loop,ffm" />
				<code>
					<![CDATA[_data:Array = [item1,item2,item3,item4];
					
for each(var item in _data)
{
	doSomething();
}]]>
				</code>
				<notes>
• _data:Array = [] -  Is an array holding data, for this example 4 items.
• for each() - Begins the for each loop, all paramters for the loop go inside the brackets
• var item - Creates a new variable named item, this has no relation to the name "item" in the Array data. The variable name can be anything but for this example it is item.
• in _data - This loops through the data in the "_data" Array and pulls out each piece individually, it then stores that data in a variable called "item". This variable is then passed to the function inside the loop.
• doSomething() - The function that accepts the variable "item". This function will run for each item in the Array.
				</notes>
				<resources>
				</resources>
		</snippet>
		<snippet id = "positioningWithLoop" course="ffm">
				<name>Positioning with loops</name>
				<difficulty>Moderate</difficulty>
				<keywords text="while,loop,while loop,ffm" />
				<code>
					<![CDATA[for(var i:uint = 0 ; i < 5 ; i++ )
{
	var s:Square = new Square();
	addChild(s);
	s.y = (s.height +10) * j; 
	s.x = s.width/2 + (s.width + 10) * i;
}]]>
				</code>
				<notes>
• for(var i:uint = 0; i<![CDATA[<]]>5; i++) - Creates a new for loop that holds a variable "i" that is data typed as an unsigned integer equal to zero. The loop will run as long as "i" is less than 5, and incriments by 1 every time the loop runs.
• addChild(s); - Adds the square to the stage.
• var s:Square = new Square(); - Creates a new variabled named "s" and it is data typed as a Square (custom class) and is set equal to a new Square.
• s.y = (s.height + 10) * i; - Sets the vertical position of the square equal to the height of the square plus 10 pixels of padding. This is then multiplied by "i" so the position of the square changes with each iteration.
• s.x = s.width/2 + (s.width + 10) * i; - Sets the horizontal position of the square equal to half the width of the square plus the squares width and 10 pixels of padding. This is then multiplied by "i" so the position changes with each iteration.
				</notes>
				<resources>
				</resources>
		</snippet>
		<snippet id = "removingWithLoops" course="ffm">
				<name>Removing items with loops</name>
				<difficulty>Moderate</difficulty>
				<keywords text="remove,loops,removing,removing with loop,while loop,ffm" />
				<code>
					<![CDATA[while(numChildren > 1)
{
	removeChildAt(1);
}]]>
				</code>
				<notes>
• while() - Begins a new while loop.
• (numChildren > 1) - Checks the number of children (objects) on the stage and verfies if there is more than 1 on the stage
• removeChildAt(1); - While there is more than 1 child on the stage this function will remove the child at 1 until there is less than 1 on the stage.
//NOTE: Flash starts counting at zero (0) not 1, so this loop would remove all children except for the child at the zero index, this child would remain on the stage. To remove all items chagne 1 to 0.
				</notes>
				<resources>
				</resources>
		</snippet>
		<snippet id = "toggleLogic" course="ffm">
				<name>Toggle Logic</name>
				<difficulty>Moderate</difficulty>
				<keywords text="toggle,logic,toggle logic,ffm" />
				<code>
					<![CDATA[item.addEventListener(MouseEvent.CLICK, onClick);
private function onClick(event:MouseEvent):void
{
	if (evt.currentTarget.currentLabel == "off")
	{
		evt.currentTarget.gotoAndStop("on");
	}
	else
	{
		evt.currentTarget.gotoAndStop("off");
	}
}]]>
				</code>
				<notes>
• item.addEventListener(MouseEvent.CLICK, onClick); - Adds and event listener to an item that listens for a mouse click event, once this event has occrued the event handler runs a function called "onClick".
• private function onClick(event:MouseEvent):void - The event handler for the event listener, listens for a mouse event and returns nothing.
• if(event.currentTarget.currentLabel == "off") - If statement that checks the currentTarget (item being clicked) to see if that current targets label is equal to the string "off". NOTE: This type of logic requires the use of frame labels, these can be applied to objects within the Flash IDE.
• event.currentTarget.gotoAndStop("on"); - If the current target's label is set to "off" then the current target's timeline is moved to the frame holding the frame label equal to "on".
• else - Notifies the function there is a second condition.
• event.currentTarget.gotoAndStop("off"); - If the current target's label is set to "on" then the current target's timeline is moved to the frame holding the frame label equal to "off".
				</notes>
				<resources>
				</resources>
		</snippet>
		<snippet id = "collisionDetection" course="ffm">
				<name>Collision Detection</name>
				<difficulty>Moderate</difficulty>
				<keywords text="toggle,logic,toggle logic,ffm" />
				<code>
					<![CDATA[if(  item.hitTestObject(item2)  )
{
	doSomething();
}
	else
{
	doSomethingElse();
}]]>
				</code>
				<notes>
• if() - Begins a new if loop.
• item.hitTestObject(item2) - This argument will test to see if the first item ever comes in contact with the second item. If the argument returns true then the first function will run, else the second function will run.
• doSomething() - This function runs if the "hitTestObject" returns a true value. This function would incriment a score, remove items from the stage, or other various tasks.
• else - Notifies the function there is a second condition.
• doSomethingElse() - This function runs if "hitTestObject" returns false.
				</notes>
				<resources>
				</resources>
		</snippet>
		<snippet id = "creatingAnArray" course="ffm">
				<name>Creating an Array</name>
				<difficulty>Moderate</difficulty>
				<keywords text="array,creating,creating an array,ffm" />
				<code>
					<![CDATA[var data:Array = [] ]]>
				</code>
				<notes>
• var data:Array - Creates a new variable named data and data types this variable as an Array.
• = [] - Instantiates the Array and sets it equal to null, or empty.
				</notes>
				<resources>
				</resources>
		</snippet>
		<snippet id = "addingDataToAnArray" course="ffm">
				<name>Adding data to an Array</name>
				<difficulty>Moderate</difficulty>
				<keywords text="array,creating,creating an array,adding,data,adding to an array,ffm" />
				<code>
					<![CDATA[var data:Array = [] 
var item:String = "hello";
var item2:String = "world";
var item3:String = "goodbye";

data = [item,item2,item3]]]>
				</code>
				<notes>
• var data:Array - Creates a new variable named data and data types this variable as an Array.
• = [] - Instantiates the Array and sets it equal to null, or empty.
var item:String - Creates a new variable named "item" and data types this variable as a String holding the value "Hello".
//Assume the same for variable items 2 and 3.
• data = [item, item2, item3] - Takes the newly created item variables and stores these items into the data Array. The Array now holds 3 items that are composed of strings, these items can now be accessed by different classes thru the use of getter/setters.
				</notes>
				<resources>
				<link href = "http://wddbs.com/FFM/slides/Day%208/FFM_Arrays.key.pdf" Title = "FFM Portal"/>
				</resources>
		</snippet>
		<snippet id = "loopingThruArrays" course="ffm">
				<name>Looping over Arrays</name>
				<difficulty>Moderate</difficulty>
				<keywords text="array,over,thru,loop,looping,ffm" />
				<code>
					<![CDATA[_data:Array = [item1,item2,item3,item4];
					
for each(var item in _data)
{
	doSomething();
}]]>
				</code>
				<notes>
• _data:Array = [] -  Is an array holding data, for this example 4 items.
• for each() - Begins the for each loop, all paramters for the loop go inside the brackets
• var item - Creates a new variable named item, this has no relation to the name "item" in the Array data. The variable name can be anything but for this example it is item.
• in _data - This loops through the data in the "_data" Array and pulls out each piece individually, it then stores that data in a variable called "item". This variable is then passed to the function inside the loop.
• doSomething() - The function that accepts the variable "item". This function will run for each item in the Array.
				</notes>
				<resources>
				</resources>
		</snippet>
		<snippet id = "settingUpCounter" course="ffm">
				<name>Setting up a counter</name>
				<difficulty>Moderate</difficulty>
				<keywords text="counter,setting up,setting up counter,ffm" />
				<code>
					<![CDATA[var counter:uint = 0;
while(counter < n)
{
	doSomething();
	counter++; 
}]]>
				</code>
				<notes>
• var counter:uint = 0 - Creates a new variable named "counter" and data types this variable as a unsigned integer equal to zero (0).
• while() - Begins a new while loop.
• whileCounter <![CDATA[<]]> n - Checks the condition to see if the counter is less than a number specified by "n".
• doSomething() - The function that runs while the condition returns true.
• counter++; - Incriments the whileCounter variable by 1 each time the loop runs, once the loop reaches the desired number set by "n" the loop stops. 
				</notes>
				<resources>
				</resources>
		</snippet>
		
<!--             end FFM code snippets, begin OOP snippets                -->

		<snippet id="creatingValueObject" course="oop">
				<name>Creating a Value Object</name>
				<difficulty>Easy</difficulty>
				<keywords text="creating,value,object,value object,creating value object,oop" />
				<code>
					<![CDATA[public class CodeVO
{
	public var name:String;
	public var age:int;
	public var color:uint;
	public var condition:boolean = true (or false);
	public var num:Number;
	
public function CodeVO()
{
}]]>
				</code>
				<notes>
• Creates a new class with an extension of "vo" (ex. com.fsu.vo), once created your value object can hold variables of various data types.
• Next, create your public variables, these variables can be any data type depending on the data they need to store. While a default value is not required for  all the boolean data type does require a default value.
				</notes>
				<resources>
					<link href="http://wddbs.com/~jmadsen/oop/videos/" title="OOP ScreenCasts" />
				</resources>
		</snippet>
		<snippet id="implicitGetterSetter" course="oop">
				<name>Implicit Getter/Setter</name>
				<difficulty>Moderate</difficulty>
				<keywords text="getter,setter,implicit,getter/setter,oop" />
				<code>
					<![CDATA[public class Button extends buttonBase
{
	private var _book:BookVO;
		
	public function Button()
	{
		super();
	}
	public function get book():BookVO
	{
		return _book;
	}
	public function set book(value:BookVO):void
	{
		_book = value;
		tfLabel.text = _book.title;
	}
}]]>
				</code>
				<notes>
• public class Button extends ButtonBase - Custom class that extends a button symbol created in the Flash IDE. 
• private var _book:BookVO - Instantiates a new variable called "_book" that is data typed as a BookVO. By data typing the variable BookVO it understands that it understands the information it will be holding will be in the form of a Value Object.
• public function Button() - Constructor class for the button object.
• super(); - refers to the parent of the button class.

// To generate your Getter/Setter highlight the "_book" variable, right click your mouse, under SOURCE click "Generate Getter/Setter", select your preferences then click OK.

• public function get book():BookVO - Gets the information from the book Value Object and returns the information as a BookVO.
• return _book; - returns the BookVO information to the _book variable.
• public function set book(value:BookVO):void - Setter for setting the book variables values to that of the BookVO. This function returns nothing.
• _book = value  - Sets the "_book" variables data equal to the value of the BookVO.
•tfLabel.text = book.title - Sets the button text equal to the title of the first book. Using a for each loop would create a button for each Value Object and set the text for each button equal to the title of each book in the VO.
				</notes>
				<resources>
					<link href="http://wddbs.com/~jmadsen/oop/videos/" title="OOP ScreenCasts" />
				</resources>
		</snippet>
		<snippet id="creatingButtonsWithArray" course="oop">
				<name>Creating button with Array data</name>
				<difficulty>Moderate</difficulty>
				<keywords text="for each,loop,array,for,each,button,oop" />
				<code>
					<![CDATA[var show:ShowsVO;
var _shows:Array = [show1,show2,show3];
var yPos:Number = 10;
var xPos:Number = 10;
			
for each(var show:ShowsVO in _shows)
	{
		var btn:ShowButton = new ShowButton();
		addChild(btn);
		btn.showVO = show;
				
		btn.y = yPos += btn.height + 10;
		btn.x = xPos;
	}]]>
				</code>
				<notes>
• var show:ShowVO - Creates a new variable named show that holds ShowVO data.
• var _shows:Array = [show1,show2,show3] - Creates a new Array named _shows that is holding 3 show items in it.
• var yPos:Number = 10; - Creates a variable that represents the buttons Y position, data types this variable as a Number, and gives it a default value of 10.
• var xPos:Number = 10; - Creates a variable that represents the buttons X position, data types this variable as a Number, and gives it a default value of 10.

• for each(var show:ShowVO in _shows) - This for each loop goes through the "_shows" array and for every Value Object in the Array it pulls that information out and stores it in a variable called "show".
• var btn:ShowButton = new ShowButton - Creates a new variable named "btn" that is data typed as a ShowButton, which is a custom class that extends a button object created in the Flash IDE, and then sets that variable equal to a new instance of the ShowButton.
• addChild(btn) - Adds the button to the stage.
• btn.ShowVO = show; - Takes the data from the show variable and stores that in the Value Object inside the button class. By doing this the button class now has access to the data stored in the ShowVO Value Object. 

btn.y = yPos += btn.height + 10 - Sets the buttons vertical position. Starts with an itial value of 10 pixels, it then adds the button height plus 10 pixels of padding for each button that is created. This will allow the buttons to position themselves into a vertical stack
btn.x = xPos - sets the buttons horizontol position equal to value of xPos, which is 10 pixels.
				</notes>
				<resources>
					<link href="http://wddbs.com/~jmadsen/oop/videos/" title="OOP ScreenCasts" />
				</resources>
		</snippet>
		<snippet id="overridingFunction" course="oop">
				<name>Overriding a function</name>
				<difficulty>Moderate</difficulty>
				<keywords text="function,override,overriding a function,oop" />
				<code>
					<![CDATA[override public function set name(value:String):void
{
	name = value;
}
		
override public function get name():String
{
	return name;
}]]>
				</code>
				<notes>
• override public function - Overrides a public function stored in another class. This is used so multiple classes can use the same function and return different results.
• set name(value:String):void - Setter for a name variable, accepts a value in the form of a String and returns nothing.
• name = value - Sets the name variable equal the value returned from the Getter.
• override public function get name():String - Getter for retrieving the String data used for the name variable.
• return name; - Returns the value of the String to the name variable.
				</notes>
				<resources>
					<link href="http://wddbs.com/~jmadsen/oop/videos/" title="OOP ScreenCasts" />
				</resources>
		</snippet>
		<snippet id="creatingAnInterface" course="oop">
				<name>Creating an Interface</name>
				<difficulty>Easy</difficulty>
				<keywords text="create,creating,interface,creating an interface,oop" />
				<code>
					<![CDATA[public interface IAnimals
{
	function makeNoise():void
	function sayHello():void
	function set name(value:String):void
	function get name():String
}]]>
				</code>
				<notes>
//Begin by creating a new interface class, give the class a package and a file name then press OK, this will create your new interface class. Remeber to begin the name of your interface classes with a capital letter "i" (I).

• public interface IAnimals - The constructor function for the Interface class.
• function makeNoise():void - Creates a public function called "makeNoise" that returns nothing.
• function sayHello():void - Creates a function call "sayHello" that returns nothing.
• function set name(value:String):void - Creates a public implicit Setter that accepts a value equal to a string and returns nothing.
• function get name():String - Creates a public implicit Getter that accepts nothing and returns a String.

//Once your interface has all the function it needs, you can then proceed to attach this interface to any class that needs access to these functions. You may then override these functions for each class so the functions work the same but return different data.
				</notes>
				<resources>
					<link href="http://wddbs.com/~jmadsen/oop/videos/" title="OOP ScreenCasts" />
				</resources>
		</snippet>
		<snippet id="implimentingAnInterface" course="oop">
				<name>Implimenting an Interface</name>
				<difficulty>Easy</difficulty>
				<keywords text="impliment,implimenting,interface,implimenting an interface,oop" />
				<code>
					<![CDATA[public class Duck extends DuckBase implements IAnimals]]>
				</code>
				<notes>
• When creating a class that needs to impliment an Interface, simply click "Add.." in the class creation menu, this will display a search box. 
• Type the name of your interface into the search box, the list updates dynamically so your interface should appear after only typing a few letter.
• Click the Interface you want to include and and click "OK".
• Click "Finish" in the class creation menu and your new class will be created and will extend the Interface you chose to include.
				</notes>
				<resources>
					<link href="http://wddbs.com/~jmadsen/oop/videos/" title="OOP ScreenCasts" />
				</resources>
		</snippet>
		<snippet id="creatingAConstant" course="oop">
				<name>Creating a Constant</name>
				<difficulty>Easy</difficulty>
				<keywords text="create,creating,constant,static,public,oop" />
				<code>
					<![CDATA[private const CLASS_NAME:String = "OOP";]]>
				</code>
				<notes>
• private const - Creates a new public static constant. Constants are variables who value does not change.
• CLASS_NAME:String - CLASS_NAME is the name of constant, notice it uses all uppercase letter and underscores in place of spaces or camelCase. Is data typed as a String.
• = "OOP"; - Is the string value for the constant, this value will not change throughout the run of the program. However, if you need to chagne the value of the constant you can change it here.
				</notes>
				<resources>
					<link href="http://wddbs.com/~jmadsen/oop/videos/" title="OOP ScreenCasts" />
				</resources>
		</snippet>
		<snippet id="creatingAStaticConstant" course="oop">
				<name>Creating a Static Constant</name>
				<difficulty>easy</difficulty>
				<keywords text="create,creating,constant,static,public,oop" />
				<code>
					<![CDATA[public static const CLASS_NAME:String = "OOP";]]>
				</code>
				<notes>
• public static const - Creates a new public static constant. Static constants are variables who value does not change and can be accessed throughout the run of the program.
• CLASS_NAME:String - CLASS_NAME is the name of constant, notice it uses all uppercase letter and underscores in place of spaces or camelCase. Is data typed as a String.
• = "OOP"; - Is the string value for the constant, this value will not change throughout the run of the program. However, if you need to chagne the value of the constant you can change it here.
				</notes>
				<resources>
					<link href="http://wddbs.com/~jmadsen/oop/videos/" title="OOP ScreenCasts" />
				</resources>
		</snippet>
		<snippet id="creatingAStaticVariable" course="oop">
				<name>Creating a Static Variable</name>
				<difficulty>Moderate</difficulty>
				<keywords text="create,creating,variable,static,public,oop" />
				<code>
					<![CDATA[//creates a class that that displays a textField. The text for that textField is called from another class that is held in a static variable.
					
package 
{
	import flash.display.Sprite;
	import flash.text.TextField;
	
	public class Main extends Sprite 
	{
	       private var tField:TextField;
	       public function Main () 
	       {
	               myTest();
	       }
	       private function myTest():void 
	       {
	               var Testvar:Testvar = new Testvar ();
	               tField = new TextField();
	               tField.text = Testvar.test;
	               addChild(tField);
	       }
	}
}
//creates a class that holds a static variable

import flash.display.Sprite;
class Testvar extends Sprite 
{
	public static var test:String;
	public function Testvar() 
	{
	   test = "I am static";
	}
}]]>
				</code>
				<notes>
//Static variables are part of the class where they are declared and can only be called through the class.
• public static var test:String - Creates a new static variable that holds a String.
• test = "I am static" - Sets the String of the static variable equal to the text in quotes.
var Testvar:Testvar = new Testvar(); - Instantiates the Testvar class, this allows the static variable to be called through the class.
• tField.text = Testvar.test; - Sets the text of the textField created Main class equal to the value of the static variable in the Testvar class.
				</notes>
				<resources>
					<link href="http://wddbs.com/~jmadsen/oop/videos/" title="OOP ScreenCasts" />
				</resources>
		</snippet>
		<snippet id="creatingAStaticFunction" course="oop">
				<name>Creating a Static Function</name>
				<difficulty>Moderate</difficulty>
				<keywords text="create,creating,variable,static,public,oop" />
				<code>
					<![CDATA[public static function truncateTxt(value:String, length:int):String
{
	return value.slice(0, length);
}		
		
private function truncateText():void
{
	var text:String = "Truncate this text";
	var length:int = Math.random() * 10;
			
	textField.text = TextUtil.truncateTxt(text, length);
}]]>
				</code>
				<notes>
//Static methods cannot be overridden in subclasses since they are resolved at compile time. (doesn’t allow for polymorphism) 

• public static function truncateTxt(value:String, length:int):String; - Creates a new static function that accepts a String value and a integer and will truncate the text to match the integer passed in. It then returns the truncated text as a Sring.
• return value.slice(0,length); - Will slice the String value based on the length integer, starts at the zero index (first letter).
• TextUtil.truncateTxt(text, length); - TextUtil is a Utility class that holds the truncateTxt function. In the main class you pass this function the text String and length integer and it will truncate the text based on these values.

//Each class can define their own static methods with the same name/signature of the static methods as defined in their subclasses/superclasses.
				</notes>
				<resources>
					<link href="http://wddbs.com/~jmadsen/oop/videos/" title="OOP ScreenCasts" />
				</resources>
		</snippet>
		<snippet id="useCapture" course="oop">
				<name>Events with useCapture</name>
				<difficulty>Advanced</difficulty>
				<keywords text="event,events,capture,usecapture,oop" />
				<code>
					<![CDATA[object.addEventListener(event.EVENT, doSomething, useCapture;]]>
				</code>
				<notes>
• object.addEventListner - Adds an event listener to an object.
• event.EVENT - The event the listener responds to, can be any event in the object event list.
• doSomething - The function that would run once the event has taken place.
• useCapture - Indicates that the user wishes to initiate capture. After initiating capture, all events of the specified type will be dispatched to the registered listener before being dispatched to any EventTargets beneath it in the DOM tree.
				</notes>
				<resources>
					<link href="http://wddbs.com/~jmadsen/oop/videos/" title="OOP ScreenCasts" />
				</resources>
		</snippet>
		<snippet id="inheritence" course="oop">
				<name>Inheritence: Extending another class</name>
				<difficulty>Advanced</difficulty>
				<keywords text="inheritence,class,extend,extending,oop" />
				<code>
					<![CDATA[	public class Object extends ObjectBase
{
	public function object()
	{
		super();
	}
	public function doSomething():void
	{
			//actions to be performed
	}
	public function doSometingElse():void
	{
			//actions be performed
	}
}

//Next creates a new class that needs the same functionality and extend the first class you created (object)

public class NewObject extends Object
{
	public function MaxMover()
	{
		super();
	}
	public function doSomething():void
	{
		//new actions to be performed
	}
	public function doSomethingElse():void
	{
		//new actions to be performed
	}
}]]>
				</code>
				<notes>
• public class Object extends ObjectBase - A custom class that extends a object created in the Flash IDE.
• public function object() - The class constructor.
• super() - Extends the parents functionality to this class.
• public function doSomething() / doSomethingElse() - Functions the class performs, made public so that other classes can access these functions as well.

• public class NewObject extends Object - Creates a new class named "NewObject" that extends the "Object" class created earlier. By allowing the new class to extend the previous class it gains all the functionality of the previous class through the concept of Inheritence.
• public function doSomething():void -Public function inherited from the class the NewObject class is extending. These functions will performt he same actions for any class they extend.
• public function doSomethingElse():void - Public function inherited from the class the NewObject class is extending. These functions will performt he same actions for any class they extend.
				</notes>
				<resources>
					<link href="http://wddbs.com/~jmadsen/oop/videos/" title="OOP ScreenCasts" />
				</resources>
		</snippet>
		<snippet id="polymorphism" course="oop">
				<name>Polymorphism</name>
				<difficulty>Advanced</difficulty>
				<keywords text="inheritence,class,extend,extending,oop" />
				<code>
					<![CDATA[	public class Object extends ObjectBase
{
	public function object()
	{
		super();
	}
	public function doSomething():void
	{
			//actions to be performed
	}
	public function doSometingElse():void
	{
			//actions be performed
	}
}

//Next creates a new class that needs the same functionality and extend the first class you created (object)

public class NewObject extends Object
{
	public function MaxMover()
	{
		super();
	}
	override public function doSomething():void
	{
		//new actions to be performed
	}
	override public function doSomethingElse():void
	{
		//new actions to be performed
	}
}]]>
				</code>
				<notes>
• public class Object extends ObjectBase - A custom class that extends a object created in the Flash IDE.
• public function object() - The class constructor.
• super() - Extends the parents functionality to this class.
• public function doSomething() / doSomethingElse() - Functions the class performs, made public so that other classes can access these functions as well.

• public class NewObject extends Object - Creates a new class named "NewObject" that extends the "Object" class created earlier. By allowing the new class to extend the previous class it gains all the functionality of the previous class through the concept of Inheritence.
• override public function doSomething():void - Overrides the inherited function, this allows the function to work in the same manner but produce different results depending on the code inside of the function. (Polymorphism)
• override public function doSomethingElse():void - Overrides the inherited function, this allows the function to work in the same manner but produce different results depending on the code inside of the function. (Polymorphism)
				</notes>
				<resources>
					<link href="http://wddbs.com/~jmadsen/oop/videos/" title="OOP ScreenCasts" />
				</resources>
		</snippet>
		<snippet id="flexLibraryProject" course="oop">
				<name>Resource: Adding a Flex library project</name>
				<difficulty>Easy</difficulty>
				<keywords text="flex library,library,flex,adding,project,oop" />
				<code>
					<![CDATA[//By adding Flex LIbraries to your projects it allows you to utilize assets such a "Reusable code library" in any project you are working on. There is no code for this so just follow the steps below to add a library to your project.]]>
				</code>
				<notes>
• Beging by right-clicking on the projects main container folder, at the bottom of the pop up menu you will see an option called "Properties" click on properties to open properties menu.
• Next, click on the "Actionscript Build Path" option in the left side menu.
• From here you can add projects, SWC folders, or single SWCs. To add a library such as a "Reusable code library" select the "Add Project" option.
• If your code libraries are loaded into the Flash Builder the a box should pop up with all the Flex Projects Flex Builder can find. 
• Select the library you would like to add to your project and click OK.
• Lastly, click OK in the build path menu box. Thats it, your Flex Library has been added to your project and you may now utilize any reusable code you have in your library in the project you added it to.
				</notes>
				<resources>
					<link href="http://wddbs.com/~jmadsen/oop/videos/" title="OOP ScreenCasts" />
				</resources>
		</snippet>
		
<!--             end OOP code snippets, begin FAT snippets                -->
		<snippet id="urlLoader" course="fat">
				<name>URLLoader class</name>
				<difficulty>Advanced</difficulty>
				<keywords text="xxxx,fat" />
				<code>
					<![CDATA[xxxxxx]]>
				</code>
				<notes>
• xxxxx
				</notes>
				<resources>
					<link href="#" />
				</resources>
		</snippet>
		
	</snippets> <!--end of snippet node-->
		